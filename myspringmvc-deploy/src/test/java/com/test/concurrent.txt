临界区/互斥区

知识面广/技术相似度高,上手快/乐观开朗有合作精神
没拿到锁,就进入等待队列,不断的竞争锁,竞争锁的线程越多越容易导致cpu使用率过高

ReentrantLock 可重入锁 可中断 可限时  可公平锁(先到先得,防止阻塞线程处于饥饿状态)
.lock 申请锁,一次只能有1个线程获得锁,但是1个线程可以加多重锁并计数.单线程可重复进入,但需要要重复退出.
.unlock 释放锁,必须加载finally代码段里执行,防止代码异常导致没有释放锁;condition.await也可以释放锁,但是可以必须unlock获得


其他线程的join()方法(非静态方法,等于调用的是其他线程对象的方法),那么等待对象其他线程结束后再执行当前线程,类似于从异步编程同步,且当前线程最后执行.这个方法可以让当前线程等级异步线程执行完后再执行,也就使得join后面的代码变得同步且顺序执行.
yield()方法(静态方法,Thread.yield()当前线程把cpu先让出去给别人用,别人不用了我在用,这可能出现饥饿状态,即当前线程优先级低,一直谦让,永远也拿不cup控制权)
sleep()方法(静态方法,可睡眠当前线程)
isAlive()方法,返回当前线程是否正在执行,没有开始和已经死亡的线程返回false,正在执行的线程返回true
setDaemon()方法,将线程设置为守护线程,如果所有用户线程都停止了,那么守护线程也会都自动终止;如果有用户线程活着,程序就不会终止;

park和unpark类似于wait和notify,但好处是可以先unpark后park;而如果先notify后wait那么线程会用于都处于wait状态,这让编程变得复杂,如果先执行notify,在执行wait,线程会一直等待.

成员变量在堆中 局部变量在栈中
实参 实际参数,必须有明确的值;行参 行为参数,用来接受接入参数的,及方法名中的参数.

java中每个对象都有一个monitor(锁住了一个对象,就是获得相关联的监视器),只有执行了对象的synchronize方法或代码块,才可以获得monitor,执行完后就释放,而wait和notify方法必须持有monitor对象才能执行.


对象锁，就是就是 synchronized 给某个对象 加锁,锁是互斥锁(临界区/独占),同时最多一个线程获得锁
对象锁和类锁的区别?对象锁是作用与一个实例对象上的,类锁是作用于静态方法或者class类上的.类锁和对象锁不互斥,类锁是全局唯一的,类锁与类锁互斥,实例对象锁一个实例一个,与类锁和其他实例对象锁不互斥,只有统一对象锁的线程才互斥;
加synchronize的方法叫同步方法,不加synchronize的锁叫异步方法;
    原子性：提供了互斥访问,通过synchronize保证代码块串行执行。
    可见性：一个线程对主内存的修改可以及时的被其他线程观察到,通过volatile和synchronize关键字从主内存读取;
    有序性：一个线程观察其他线程中的指令执行顺序，由于指令 重排序的存在，该观察结果一般杂乱无序。需要通过volatile防止指令重排序
synchronized在加锁时进行数据的重加载（主内存 -> 工作内存），在释放锁时将数据刷新到主内存。

wait和notify是Object对象方法,不是线程方法,使用时使用synchronize锁住一个对象,再调用这个对象的wait
notifyAll()唤醒此对象监视器上等待的所有线程。
notify()唤醒此对象监视器上的一个线程,具体不确定.
wait()释放对象锁与让出cpu,进入等待队列,直到此对象调用notify或notifyAll
notify和notifyAll不是立即释放锁,而是在synchronize执行完后释放锁

Condition
await()使当前线程加入等待队列中，并释放当锁，当其他线程调用signal()会重新请求锁。与Object.wait()类似。


